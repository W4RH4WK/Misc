#!/usr/bin/env python3

import os
import re
import sys

from base64 import b64encode
from pandocfilters import toJSONFilter, stringify, Image, RawInline
from subprocess import check_output

TEX_FIGURE = """{tikzlibs}
\\begin{{figure}}[htbp]
\\centering
\\input{{{input}}}
\\caption{{{caption}}}
\\end{{figure}}
"""


def tex2svg(content):
    tex2svg = ['tex2svg', 'tex2svg.tex']
    svg = check_output([os.path.join('tpl', x) for x in tex2svg],
                       input=content.encode())
    svg = b64encode(svg).decode()
    return 'data:image/svg+xml;base64,{}'.format(svg)


def tikz(key, value, format, meta):
    if key != 'Image':
        return

    src, caption = value[1][0], value[0]
    if not os.path.exists(src) or os.path.splitext(src)[1] != '.tikz':
        return

    with open(src, 'r') as ftikz:
        content = ftikz.read()

    tikzlibs_re = re.compile('\\\\usetikzlibrary{.*}')
    tikzlibs = tikzlibs_re.findall(content)
    tikzlibs = '\n'.join(tikzlibs)

    if format == 'latex':
        args = {'tikzlibs': tikzlibs,
                'input': src,
                'caption': stringify(caption)}
        return RawInline('latex', TEX_FIGURE.format(**args))
    elif format == 'html5':
        with open(src, 'r') as ftikz:
            svg = tex2svg(ftikz.read())
        return Image(caption, [svg, 'fig:'])


if __name__ == '__main__':
    toJSONFilter(tikz)
